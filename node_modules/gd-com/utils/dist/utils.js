"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prefixWithLength = exports.StreamTcp = void 0;
var stream_1 = require("stream");
var StreamTcp = /** @class */ (function (_super) {
    __extends(StreamTcp, _super);
    function StreamTcp(opts) {
        var _this = _super.call(this, __assign(__assign({}, opts), { objectMode: true })) || this;
        _this._buffer = Buffer.from([]);
        return _this;
    }
    StreamTcp.prototype._transform = function (chunk, enc, done) {
        this._buffer = Buffer.concat([this._buffer, chunk]);
        while (this._buffer.length >= 4) {
            var _length = this._buffer.readUInt16LE(0);
            if (this._buffer.length >= (_length + 4)) {
                this.push(this._buffer.slice(4, _length + 4));
                this._buffer = this._buffer.slice(_length + 4);
            }
            else {
                break;
            }
        }
        done();
    };
    return StreamTcp;
}(stream_1.Transform));
exports.StreamTcp = StreamTcp;
var prefixWithLength = function (buffer) {
    var lengthBuffer = Buffer.alloc(4);
    lengthBuffer.writeUInt32LE(buffer.length, 0);
    return Buffer.concat([lengthBuffer, buffer]);
};
exports.prefixWithLength = prefixWithLength;
