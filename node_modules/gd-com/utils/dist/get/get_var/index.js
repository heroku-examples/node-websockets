"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVar = void 0;
var null_1 = require("./null");
var bool_1 = require("./bool");
var integer_1 = require("./integer");
var float_1 = require("./float");
var string_1 = require("./string");
var vector2_1 = require("./vector2");
var rect2_1 = require("./rect2");
var vector3_1 = require("./vector3");
var transform2d_1 = require("./transform2d");
var plane_1 = require("./plane");
var quat_1 = require("./quat");
var aabb_1 = require("./aabb");
var basis_1 = require("./basis");
var transform_1 = require("./transform");
var color_1 = require("./color");
var nodePath_1 = require("./nodePath");
var dictionnary_1 = require("./dictionnary");
var array_1 = require("./array");
var rawArray_1 = require("./rawArray");
var intArray_1 = require("./intArray");
var realArray_1 = require("./realArray");
var stringArray_1 = require("./stringArray");
var vector2Array_1 = require("./vector2Array");
var vector3Array_1 = require("./vector3Array");
var colorArray_1 = require("./colorArray");
var constants_1 = require("../../constants");
var decoderList = (_a = {},
    _a[constants_1.TYPE.NULL] = null_1.getVarNull,
    _a[constants_1.TYPE.BOOL] = bool_1.getVarBool,
    _a[constants_1.TYPE.INTEGER] = integer_1.getVarInteger,
    _a[constants_1.TYPE.FLOAT] = float_1.getVarFloat,
    _a[constants_1.TYPE.STRING] = string_1.getVarString,
    _a[constants_1.TYPE.VECTOR2] = vector2_1.getVarVector2,
    _a[constants_1.TYPE.RECT2] = rect2_1.getVarRect2,
    _a[constants_1.TYPE.VECTOR3] = vector3_1.getVarVector3,
    _a[constants_1.TYPE.TRANSFORM2D] = transform2d_1.getVarTransform2d,
    _a[constants_1.TYPE.PLANE] = plane_1.getVarPlane,
    _a[constants_1.TYPE.QUAT] = quat_1.getVarQuat,
    _a[constants_1.TYPE.AABB] = aabb_1.getVarAABB,
    _a[constants_1.TYPE.BASIS] = basis_1.getVarBasis,
    _a[constants_1.TYPE.TRANSFORM] = transform_1.getVarTransform,
    _a[constants_1.TYPE.COLOR] = color_1.getVarColor,
    _a[constants_1.TYPE.NODE_PATH] = nodePath_1.getVarNodePath,
    _a[constants_1.TYPE.RID] = undefined,
    _a[constants_1.TYPE.OBJECT] = undefined,
    _a[constants_1.TYPE.DICTIONARY] = dictionnary_1.getVarDictionnary,
    _a[constants_1.TYPE.ARRAY] = array_1.getVarArray,
    _a[constants_1.TYPE.RAW_ARRAY] = rawArray_1.getVarRawArray,
    _a[constants_1.TYPE.INT_ARRAY] = intArray_1.getVarIntArray,
    _a[constants_1.TYPE.REAL_ARRAY] = realArray_1.getVarRealArray,
    _a[constants_1.TYPE.STRING_ARRAY] = stringArray_1.getVarStringArray,
    _a[constants_1.TYPE.VECTOR2_ARRAY] = vector2Array_1.getVarVector2Array,
    _a[constants_1.TYPE.VECTOR3_ARRAY] = vector3Array_1.getVarVector3Array,
    _a[constants_1.TYPE.COLOR_ARRAY] = colorArray_1.getVarColorArray,
    _a);
function decode(buffer, offset) {
    if (offset === void 0) { offset = 0; }
    var type = buffer.readInt16LE(offset);
    var flag = buffer.readInt16LE(offset + 2);
    var data = buffer.slice(offset + 4);
    if (decoderList[type] == null) {
        throw new Error("Decode buffer error: Invalid type ".concat(type));
    }
    return decoderList[type](decode, data, flag);
}
/**
 * Decode Variant
 * @param buf {Buffer}
 * @returns {{value: *, length: Number}}
 */
function getVar(buf) {
    var data = decode(buf);
    return { value: data.value, length: data.length + 4 }; // +4 cause we don't export type length
}
exports.getVar = getVar;
